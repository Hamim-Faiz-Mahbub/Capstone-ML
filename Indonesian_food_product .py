# -*- coding: utf-8 -*-
"""Indonesian_food_product.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WJqYvA9zy4-M80tW3m_eciESR_995wPr

## Import Library
"""

# Mengimport Library yang dibutuhkan
import pandas as pd
import numpy as np
import re
import json

"""## Gathering Data"""

# Gathering Data
from google.colab import drive
drive.mount('/content/drive')
# import dataset yang dibutuhkan dan berikan nama "indonesian_food_df"
indonesian_food_df = pd.read_csv("/content/drive/MyDrive/capstone dataset/indonesia_products.csv")
indonesian_food_df.head()

# Menampilkan informasi dataset
indonesian_food_df.info()
# Menampilkan statistik deskriptif
indonesian_food_df.describe()

# Pilih kolom yang relevan untuk OCR PackFacts
selected_columns = [
    'product_name', 'brands', 'quantity',
    'energy_100g', 'energy-from-fat_100g', 'fat_100g', 'saturated-fat_100g',
    'unsaturated-fat_100g', 'monounsaturated-fat_100g', 'omega-9-fat_100g',
    'polyunsaturated-fat_100g', 'omega-3-fat_100g', 'omega-6-fat_100g', 'trans-fat_100g',
    'carbohydrates_100g', 'sugars_100g', 'added-sugars_100g',
    'soluble-fiber_100g', 'insoluble-fiber_100g', 'fiber_100g',
    'proteins_100g', 'serum-proteins_100g', 'salt_100g', 'added-salt_100g',
    'net_weight_g'
]

df_selected = indonesian_food_df[selected_columns]
# Menampilkan 5 data pertama
print (df_selected.head())
# Menampilkan informasi dataset
df_selected.info()
# Menampilkan statistik deskriptif
df_selected.describe()

# Tampilkan jumlah missing values per kolom
print("Missing values per kolom:")
print(df_selected.isna().sum())

# Cek duplikat berdasarkan kolom product_name dan ingredients_text
print("\nJumlah data duplikat berdasarkan 'product_name' dan 'brands':")
print(df_selected.duplicated(subset=['product_name', 'brands']).sum())

# Tampilkan beberapa contoh duplikat
print("\nContoh data duplikat:")
print(df_selected[df_selected.duplicated(subset=['product_name'], keep=False)].sort_values(by=['product_name']).head(10))

"""## Preprocessing Data"""

# Bersihkan spasi & ubah ke lowercase agar konsisten
df_cleaned.columns = df_cleaned.columns.str.strip()  # Hapus spasi nama kolom
df_cleaned['product_name'] = df_cleaned['product_name'].str.strip().str.lower()
df_cleaned['brands'] = df_cleaned['brands'].fillna('').astype(str).str.strip().str.lower()

# Isi missing 'brands' dari 'product_name' dan sebaliknya
df_cleaned['brands'] = np.where(df_cleaned['brands'] == '', df_cleaned['product_name'], df_cleaned['brands'])
df_cleaned['product_name'] = np.where(df_cleaned['product_name'] == '', df_cleaned['brands'], df_cleaned['product_name'])

# Hapus duplikat berdasarkan 'product_name' (nama produk unik)
df_cleaned = df_cleaned.drop_duplicates(subset='product_name', keep='first')

# Ekstrak angka dari kolom 'quantity' (misalnya '100g' â†’ 100)
def extract_quantity(val):
    if pd.isna(val):
        return np.nan
    match = re.search(r'\d+', str(val))
    return int(match.group()) if match else np.nan

df_cleaned['quantity'] = df_cleaned['quantity'].apply(extract_quantity)

# Isi missing pada 'quantity' dengan modus (angka terbanyak)
quantity_mode = df_cleaned['quantity'].mode()[0]
df_cleaned['quantity'] = df_cleaned['quantity'].fillna(quantity_mode).astype(int)

# Tangani missing 'net_weight_g' dengan rata-rata, ubah ke integer ---
df_cleaned['net_weight_g'] = df_cleaned['net_weight_g'].fillna(df_cleaned['net_weight_g'].mean()).astype(int)

# Isi missing nilai nutrisi dengan nilai modus per kolom (bukan 0 atau -1) ---
numeric_cols = [
    'energy_100g', 'energy-from-fat_100g', 'fat_100g', 'saturated-fat_100g',
    'unsaturated-fat_100g', 'monounsaturated-fat_100g', 'omega-9-fat_100g',
    'polyunsaturated-fat_100g', 'omega-3-fat_100g', 'omega-6-fat_100g', 'trans-fat_100g',
    'carbohydrates_100g', 'sugars_100g', 'added-sugars_100g',
    'soluble-fiber_100g', 'insoluble-fiber_100g', 'fiber_100g',
    'proteins_100g', 'serum-proteins_100g', 'salt_100g', 'added-salt_100g',
]

for col in numeric_cols:
    if col in df_cleaned.columns:
        mode_val = df_cleaned[col].mode()
        if not mode_val.empty:
            df_cleaned[col] = df_cleaned[col].fillna(mode_val[0])
        else:
            df_cleaned[col] = df_cleaned[col].fillna(0)  # Jika tidak ada modus, isi 0
# Final cek tipe data dan bentuk dataset
print(df_cleaned.info())
print(df_cleaned.describe())
print(df_cleaned.head())

import matplotlib.pyplot as plt
import seaborn as sns

# Statistik deskriptif
print(df_cleaned.describe())

# Distribusi kuantitas produk
sns.histplot(df_cleaned['quantity'], bins=30)
plt.title('Distribusi Quantity')
plt.show()

# Korelasi antar nutrisi
plt.figure(figsize=(10, 8))
sns.heatmap(df_cleaned[numeric_cols].corr(), annot=True, cmap='coolwarm')
plt.title('Korelasi Antar Nutrisi (per 100g)')
plt.show()

# Threshold sederhana (contoh, bisa disesuaikan berdasarkan standar WHO)
df_cleaned['high_sugar'] = df_cleaned['sugars_100g'] > 15
df_cleaned['high_salt'] = df_cleaned['salt_100g'] > 1.5

# 10 merek teratas
top_brands = df_cleaned['brands'].value_counts().head(10)
print(top_brands)

# Plot
top_brands.plot(kind='bar')
plt.title('10 Merek Teratas dalam Dataset')
plt.ylabel('Jumlah Produk')
plt.xticks(rotation=45)
plt.show()

# Simpan Datset CSV
df_cleaned.to_csv('cleaned_food_data.csv', index=False)

"""## Konversi Ke Json"""

#  konversi ke JSON
processed_data = []
for _, row in df_cleaned.iterrows():
    entry = {
        "product_name": row['product_name'],
        "brand": row['brands'],
        "quantity_g": row['quantity'],
        "nutrients": {
            "energy_100g": row['energy_100g'],
            "fat_100g": row['fat_100g'],
            "saturated_fat_100g": row['saturated-fat_100g'],
            "carbohydrates_100g": row['carbohydrates_100g'],
            "sugars_100g": row['sugars_100g'],
            "fiber_100g": row['fiber_100g'],
            "proteins_100g": row['proteins_100g'],
            "salt_100g": row['salt_100g']
        }
    }
    processed_data.append(entry)

output_file = 'packfacts_ocr_dataset.json'
with open(output_file, 'w', encoding='utf-8') as f:
    json.dump(processed_data, f, indent=2, ensure_ascii=False)

print(f"\nFile JSON berhasil dibuat: {output_file}")